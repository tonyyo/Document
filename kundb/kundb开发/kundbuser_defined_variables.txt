token.go修改款项
1、添加解析第一个字符为‘@’的token，返回两种token ID:AT_ID(user defined variables）、AT_AT_ID(system variables)，之前识别‘@..’和‘@@..’时，返回的时候会将符号一起返回，但现在的话只返回符号后面的字符，只不过在Format的时候会补回来。
2、isLetter去掉‘@’, 在scanIdentifier添加‘@’判断，抵消改变。
3、将isDbSystemVariables合并到第一项

sql.y修改注意款项：
1、添加token： AT_ID、AT_AT_ID
  添加非终结符：id_or_var, 包含ID、AT_ID、AT_AT_ID三条声明
2、将终结符ID用非终结符id_or_var替换，因为ID是bytes类型，id_or_var是ColIdnet类型，
  所以在规则部分要注意：
     string($ID) --> string($id_or_var.String()) 
     NewColIdent(string($ID)) --> $$id_or_var   
     NewTableIdent(string($ID)) --> NewTableident(string($id_or_var.String()))   // 注意这个时候会将@也传入TableIdent，到了ast.go的话会将其默认为非变量，从而加上反引号``
3、alter_object_type： 
  Alter table ADD/DROP + ?

ast.go修改款项:
1、ColIdent结构体新增属性at atCount
2、func (node *SetExpr) Format， 因为ColIdent已经修改，node.Name.String --> node.Name  s% --> v%
3、func (node ColIdent) Format，func (node TableIdent) Format 也做相应修改
4、func formatID(buf *TrackedBuffer, original, lowered string) 也做相应修改， 注意use @replica时，不能传下去，
5、NewColIdent --> NewColIdentWithAt
6、func (node ColIdent) String()


parse_test.go修改款项：
1、将use @replica 的期待结果加上了反引号，即use `@replica`, 新增use ks@replica ,结果也会返回反引号
2、新增用户自定义变量的语法解析语义判断
3、开源vitess引入了一个包，替代报错want解释语句，但我没用

analyzer.go 修改款项：
将开源代码合进来之后出现一个问题：
set session transaction isolation level repeatable read  # setStmt.scope == session, 此时的默认Scope应该是“”， 但要求返回session， 但这个时候就会报mix use，
所以我在判断完之后再进行赋值。
还暴露出一个问题就是@ch，如果ch是反引号，这个问题没法和平解决。悦哥的case要求返回int(ch), 而@`float`要求返回AT_ID

executor.go修改款项：
对setkey的key和scope单独进行分析，先对scope分析，再对key进行分析。

开源vitess：set @v1 = 1 并没有将其发到底层mysql， 而是放入session中，通过存入createNeededBindVariables函数其从session中拿出，存入bindvar，bindvar将一直传递到vttablet层，才被解析，然后存入sqlresult结构体中的rows，
这样浪费了时间，直接在gate中获取就好。


计划：
1、将vitess最新代码拉下来，看是否有所改进
2、找到现有vitss里vttablet解析bindvar的地方



全局变量中的session级别的变量：
kundb不支持不加session关键字的session变量？
mysql支持修改全局变量不影响已经创建的连接的session的变量，只会影响后面创建连接的session变量



