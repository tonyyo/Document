scp root@107.172.27.254:/home/test.txt .   //下载文件

scp test.txt root@107.172.27.254:/home  //上传文件

scp -r root@107.172.27.254:/home/test .  //下载目录

scp -r test root@107.172.27.254:/home   //上传目录

ssh root@172.26.0.93  // 远程登录


docker ps  // 查看容器
docker images  //查看镜像
docker run -it -name [指定容器名称] [镜像名称] /bin/bah    // 创建容器并进入命令行界面
docker exec -it [command ID] /bin/bash   // 进入容器命令行界面
docker stop [command ID]   //  停止容器
docker rm -f [command ID]   // 删除容器

$VTROOT  == $GOPATH
$VTTOP  == $kunHome(vitess目录）

gk   //到vietess目录下
gkd  //到vtdataroot目录下

pgrep -f abc 匹配出含abc的进程 并输出进程的pid

pkill -f abc 杀掉含abc的所有进程

ctrl + shift + E ： 打开最近更改的文件

ctrl + G：定位行

vi与shell切换
:shell 可以在不关闭vi的情况下切换到shell命令行
:exit 从shell回到vi

横向切割窗口
:split+窗口名，也可以简写为:sp+窗口名
纵向切割窗口名
:vsplit+窗口名，也可以简写为：vsp+窗口名
双击ctrl+w依次切换窗口。
:e 在该窗口打开文件

git log --name-only 查看该文件最近的修改是谁

mysql -uroot -pTranswarp! -P17100 -h127.0.0.1   // 进mysql

git stash 暂存到栈中
git pop 出栈
git list 查看栈中内容

git reset --hard commit-id  回退到该版本

端口：
pub_gate: 端口15001， grpc端口15991， mysql连接端口15307
priv_gate: 端口15002, grpc端口15992， mysql链接端口15306
tablet-800：端口15800， grpc端口16800， mysql链接端口17800

git checkout -b 分支名 origin/分支名  // 从一个分支上创建一个新分支
git log -p  分支名  // 查看该分支的日志

git 拉取他人分支
git remote add repoName repoAddress
git fetch repoName
gcb newBranch repoName/selectBranch

python mysqlgroupby_test.py -v --skip-build --keep-logs --skip-teardown  // python测试

docker run --net=host --rm -i -e GO111MODULE=off -v $(pwd):/vt/src/github.com/youtube/vitess -w /vt/src/github.com/youtube/vitess 172.16.1.99/kundb-ci/x86_64/bootstrap-ci:go1.14 make unit_test  // 单元测试
docker run --net=host -i -e GO111MODULE=off -v /home/jenkins/agent/workspace/kundb/kundb-mergerequest-ci:/vt/src/github.com/youtube/vitess -w /vt/src/github.com/youtube/vitess/ 172.16.1.99/kundb-ci/x86_64/bootstrap-ci:go1.14 bash -c 'make build && make test' 																					  // python测试


free -mh  // 查看内存使用情况
show variables like 'datadir';  // 查看系统表空间，创建的表数据库的都存在这里
show variables like '%buffer%';  // 查看各种buffer的尺寸


SET optimizer_trace='enabled=on';  // 开启跟踪优化
然后执行sql，执行完之后，就可以通过以下堆栈信息查看执行详情了：

SELECT * FROM information_schema.OPTIMIZER_TRACE\G;  

ReadQueryResult是真正连接mysql数据库的地方
tableserver.go是vttablet开始的地方
gate和tablet的连接池在connection_pool.go文件中，里面有个Get函数，利用的是通道chan。

换镜像之tag重命名本地镜像： docker tag 172.16.1.99/kundb-ci/x86_64/kundb:kundb-1.3-gxb-poc 127.0.0.1:5000/transwarp/kundb:kundb-1.2.1-final
push到私有仓库： docker push 127.0.0.1:5000/transwarp/kundb:kundb-1.2.1-final
更新manager上的镜像：172.16.179.60:8180 admin/admin



